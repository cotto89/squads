{"version":3,"sources":["../../src/helper/formatPayloads.js"],"names":["formatPayloads","payloads","map","event","value","undefined"],"mappings":";;;;;;;;;;;;;;kBAQwBA,c;;AARxB;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIe,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAC7C,QAAI,sBAAcA,QAAd,CAAJ,EAA6B;AACzB,eAAO,sBAAQA,QAAR,EAAkBC,GAAlB,CAAsB;AAAA;;AAAA,gBAAEC,KAAF;AAAA,gBAASC,KAAT;AAAA,qDACxBD,KADwB,EAChBC,KADgB;AAAA,SAAtB,CAAP;AAGH;;AAED,QAAI,sBAASH,QAAT,CAAJ,EAAwB;AACpB,eAAO,mCACFA,QADE,EACSI,SADT,EAAP;AAGH;;AAED,WAAOJ,QAAP,CAb6C,CAa5B;AACpB","file":"formatPayloads.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport isString from 'lodash.isstring';\nimport toPairs from 'lodash.topairs';\n\n/**\n * @param {string|Object|Object[]} payloads\n * @returns {string} context\n */\nexport default function formatPayloads(payloads) {\n    if (isPlainObject(payloads)) {\n        return toPairs(payloads).map(([event, value]) => ({\n            [event]: value\n        }));\n    }\n\n    if (isString(payloads)) {\n        return [{\n            [payloads]: undefined\n        }];\n    }\n\n    return payloads; // => [{context.action: value}, ...]\n}\n"]}
{"version":3,"sources":["../../src/lib/SharedAction.js"],"names":["SharedAction","options","context","mixins","$mixins","Array","isArray","src","emitter","_emitter","register","handler","bind","action","$action","value","resolve","then","publish","result","catch","console","error","err"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;IAEqBA,Y;AACjB;;;;;AAKA,0BAAYC,OAAZ,EAAqB;AAAA;AAAA,YACTC,OADS,GACWD,OADX,CACTC,OADS;AAAA,YACAC,MADA,GACWF,OADX,CACAE,MADA;;AAEjB,aAAKD,OAAL,GAAe,gCAAgBA,OAAhB,KAA4BA,OAA3C;;AAEA,YAAME,UAAUC,MAAMC,OAAN,CAAcH,MAAd,IAAwBA,MAAxB,GAAiC,EAAjD;AACA,YAAMI,MAAM,mEAASH,OAAT,UAAkBH,OAAlB,GAAZ;AACA,6BAAM,IAAN,EAAYM,GAAZ,EAAiB,IAAjB,EAAuB,CAAC,SAAD,EAAY,QAAZ,CAAvB;AACH;;;;iCAEQC,O,EAAS;AACd,iBAAKC,QAAL,GAAgBD,OAAhB;AACA,iBAAKC,QAAL,CAAcC,QAAd,CAAuB,KAAKR,OAA5B,EAAqCS,QAAQC,IAAR,CAAa,IAAb,CAArC;AACH;;;;;AAGL;;;;AA1BA;;;kBAKqBZ,Y;AAyBrB,SAASW,OAAT,CAAiBE,MAAjB,EAAmC;AAAA;;AAC/B,QAAMC,UAAU,KAAKD,MAAL,CAAhB;;AAEA,4CAAwB,KAAKX,OAA7B,EAAsCW,MAAtC,EAA8CC,OAA9C;;AAH+B,sCAAPC,KAAO;AAAPA,aAAO;AAAA;;AAK/B,sBAAQC,OAAR,CAAgBF,yBAAWC,KAAX,CAAhB,EACKE,IADL,CACU;AAAA,eAAU,MAAKR,QAAL,CAAcS,OAAd,CAAyB,MAAKhB,OAA9B,SAAyCW,MAAzC,EAAmDM,MAAnD,CAAV;AAAA,KADV,EAEKC,KAFL,CAEW;AAAA,eAAOC,QAAQC,KAAR,CAAcC,GAAd,CAAP;AAAA,KAFX;AAGH","file":"SharedAction.js","sourcesContent":["/* eslint-disable no-use-before-define */\nimport merge from 'lodash.merge';\nimport mixin from './../helper/mixin.js';\nimport { validateContext, validateActionExistence } from './../helper/validates.js';\n\nexport default class SharedAction {\n    /**\n     * @param {Object} options\n     * @param {string} options.context\n     * @param {Array} [mixins]\n     */\n    constructor(options) {\n        const { context, mixins } = options;\n        this.context = validateContext(context) && context;\n\n        const $mixins = Array.isArray(mixins) ? mixins : [];\n        const src = merge(...$mixins, options);\n        mixin(this, src, this, ['context', 'mixins']);\n    }\n\n    _connect(emitter) {\n        this._emitter = emitter;\n        this._emitter.register(this.context, handler.bind(this));\n    }\n}\n\n/**\n * @param {string} action\n * @param {any} value\n */\nfunction handler(action, ...value) {\n    const $action = this[action];\n\n    validateActionExistence(this.context, action, $action);\n\n    Promise.resolve($action(...value))\n        .then(result => this._emitter.publish(`${this.context}.${action}`, result))\n        .catch(err => console.error(err));\n}\n"]}
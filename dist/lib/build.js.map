{"version":3,"sources":["../../src/lib/build.js"],"names":["build","emitter","dispatcher","dispatch","bind","options","squads","sharedActions","$squads","squad","_connect","$sharedActions","shared","getState","state","context","onChange","handler","on"],"mappings":";;;;;;;;;;;kBAcwBA,K;;AAdxB;;;;AACA;;;;;;AAEO,IAAMC,4BAAU,6BAAhB;AACA,IAAMC,kCAAa,+BAAnB;AACA,IAAMC,8BAAWF,QAAQE,QAAR,CAAiBC,IAAjB,CAAsBH,OAAtB,CAAjB;;AAEP;;;;;;;AAOe,SAASD,KAAT,CAAeK,OAAf,EAAwB;AAAA,QAC3BC,MAD2B,GACDD,OADC,CAC3BC,MAD2B;AAAA,QACnBC,aADmB,GACDF,OADC,CACnBE,aADmB;;AAGnC;;AACA,QAAMC,UAAUF,UAAU,EAA1B;AAJmC;AAAA;AAAA;;AAAA;AAKnC,wDAAoBE,OAApB,4GAA6B;AAAA,gBAAlBC,KAAkB;;AACzBA,kBAAMC,QAAN,CAAeT,OAAf,EAAwBC,UAAxB;AACH;;AAED;AATmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUnC,QAAMS,iBAAiBJ,iBAAiB,EAAxC;AAVmC;AAAA;AAAA;;AAAA;AAWnC,yDAAqBI,cAArB,iHAAqC;AAAA,gBAA1BC,MAA0B;;AACjCA,mBAAOF,QAAP,CAAgBT,OAAhB;AACH;AAbkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAenC,aAASY,QAAT,GAAoB;AAChB,YAAMC,QAAQ,EAAd;AADgB;AAAA;AAAA;;AAAA;AAEhB,6DAAoBR,MAApB,iHAA4B;AAAA,oBAAjBG,KAAiB;;AACxBK,sBAAML,MAAMM,OAAZ,IAAuBN,MAAMK,KAA7B;AACH;AAJe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKhB,eAAOA,KAAP;AACH;;AAED;;;AAGA,aAASE,QAAT,CAAkBC,OAAlB,EAA2B;AACvBf,mBAAWgB,EAAX,CAAc,cAAd,EAA8BD,OAA9B;AACH;;AAED,WAAO;AACHJ,0BADG;AAEHG,0BAFG;AAGHb;AAHG,KAAP;AAKH","file":"build.js","sourcesContent":["import ActionEmitter from './ActionEmitter.js';\nimport StateDispatcher from './StateDispatcher.js';\n\nexport const emitter = new ActionEmitter();\nexport const dispatcher = new StateDispatcher();\nexport const dispatch = emitter.dispatch.bind(emitter);\n\n/**\n * Build Squads\n *\n * @param {Object} options\n * @param {Squad[]} [options.squads]\n * @param {SharedAction[]} [options.squads]\n */\nexport default function build(options) {\n    const { squads, sharedActions } = options;\n\n    /* Connect squads to ActionEmitter */\n    const $squads = squads || [];\n    for (const squad of $squads) {\n        squad._connect(emitter, dispatcher);\n    }\n\n    /* Connect SharedActions to ActionEmitter */\n    const $sharedActions = sharedActions || [];\n    for (const shared of $sharedActions) {\n        shared._connect(emitter);\n    }\n\n    function getState() {\n        const state = {};\n        for (const squad of squads) {\n            state[squad.context] = squad.state;\n        }\n        return state;\n    }\n\n    /**\n     * @param {Function} handler\n     */\n    function onChange(handler) {\n        dispatcher.on('state:change', handler);\n    }\n\n    return {\n        getState,\n        onChange,\n        dispatch\n    };\n}\n"]}
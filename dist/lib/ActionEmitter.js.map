{"version":3,"sources":["../../src/lib/ActionEmitter.js"],"names":["ActionEmitter","handlers","shareds","listeners","event","listener","push","$listeners","value","context","handler","payloads","$payloads","payload","action","val"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;IAKqBA,a;AACjB,6BAAc;AAAA;;AACV,aAAKC,QAAL,GAAgB,EAAhB;AACA,aAAKC,OAAL,GAAe,EAAf;AACA,aAAKC,SAAL,GAAiB,EAAjB;AACH;;AAED;;;;;;;;;;2BAMGC,K,EAAOC,Q,EAAU;AAChB,gBAAI,CAAC,KAAKF,SAAL,CAAeC,KAAf,CAAL,EAA4B;AACxB,qBAAKD,SAAL,CAAeC,KAAf,IAAwB,EAAxB;AACH;;AAED,iBAAKD,SAAL,CAAeC,KAAf,EAAsBE,IAAtB,CAA2BD,QAA3B;AACH;;AAED;;;;;;;;;gCAMQD,K,EAAiB;AACrB,gBAAMG,aAAa,KAAKJ,SAAL,CAAeC,KAAf,CAAnB;AACA,gBAAI,CAACG,UAAL,EAAiB;;AAFI,8CAAPC,KAAO;AAAPA,qBAAO;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGrB,gEAAuBD,UAAvB,4GAAmC;AAAA,wBAAxBF,QAAwB;;AAC/BA,gCAAYA,2BAASD,KAAT,SAAmBI,KAAnB,EAAZ;AACH;AALoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMxB;;AAED;;;;;;;;;mCAMWC,O,EAASC,O,EAAS;AACzB,iDAAqBD,OAArB,EAA8B,KAAKR,QAAL,CAAcQ,OAAd,CAA9B;AACA,iBAAKR,QAAL,CAAcQ,OAAd,IAAyBC,OAAzB;AACH;;AAED;;;;;;;;;;;;;;iCAWSC,Q,EAAUH,K,EAAO;AACtB,gBAAMI,YAAY,8BAAeD,QAAf,EAAyBH,KAAzB,CAAlB;;AADsB;AAAA;AAAA;;AAAA;AAGtB,iEAAsBI,SAAtB,iHAAiC;AAAA,wBAAtBC,OAAsB;;AAC7B,wBAAMT,QAAQ,oBAAYS,OAAZ,EAAqB,CAArB,CAAd;;AAD6B,0CAED,8BAAeT,KAAf,CAFC;;AAAA,wBAErBK,OAFqB,mBAErBA,OAFqB;AAAA,wBAEZK,MAFY,mBAEZA,MAFY;;AAG7B,wBAAMC,MAAMF,QAAQT,KAAR,CAAZ;AACA,wBAAMM,UAAU,KAAKT,QAAL,CAAcQ,OAAd,CAAhB;;AAEA,6DAAyBL,KAAzB,EAAgCM,OAAhC;AACAA,+BAAWA,QAAQI,MAAR,EAAgBC,GAAhB,CAAX;AACH;AAXqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYzB;;AAED;;;;;;;;;iCAMSN,O,EAASC,O,EAAS;AACvB,iDAAqBD,OAArB,EAA8B,KAAKP,OAAL,CAAaO,OAAb,CAA9B;AACA,iBAAKP,OAAL,CAAaO,OAAb,IAAwBC,OAAxB;AACH;;AAED;;;;;;;;;gCAMQN,K,EAAiB;AAAA,mCACO,8BAAeA,KAAf,CADP;;AAAA,gBACbK,OADa,oBACbA,OADa;AAAA,gBACJK,MADI,oBACJA,MADI;;AAErB,gBAAMJ,UAAU,KAAKR,OAAL,CAAaO,OAAb,CAAhB;;AAEA,qDAAyBL,KAAzB,EAAgCM,OAAhC;;AAJqB,+CAAPF,KAAO;AAAPA,qBAAO;AAAA;;AAKrB,mBAAOE,WAAWA,0BAAQI,MAAR,SAAmBN,KAAnB,EAAlB;AACH;;AAGD;;;;iCACS;AACL,iBAAKP,QAAL,GAAgB,EAAhB;AACA,iBAAKE,SAAL,GAAiB,EAAjB;AACA,iBAAKD,OAAL,GAAe,EAAf;AACH;;;KAjHL;;kBAWqBF,a","file":"ActionEmitter.js","sourcesContent":["/* eslint-disable no-use-before-define */\n\nimport formatPayloads from './../helper/formatPayloads.js';\nimport splitEventName from './../helper/splitEventName.js';\nimport { validateHandlerExistence, hasRegisteredHandler } from './../helper/validates.js';\n\n/* # MEMO\n * evnet: 'context.action'\n * payload: pear of event and value by Object\n */\n\nexport default class ActionEmitter {\n    constructor() {\n        this.handlers = {};\n        this.shareds = {};\n        this.listeners = {};\n    }\n\n    /**\n     * Register callback as action listener\n     *\n     * @param {string} event\n     * @param {Function} listener\n     */\n    on(event, listener) {\n        if (!this.listeners[event]) {\n            this.listeners[event] = [];\n        }\n\n        this.listeners[event].push(listener);\n    }\n\n    /**\n     * Publish action result to listeners\n     *\n     * @param {string} event\n     * @param {any} [value]\n     */\n    publish(event, ...value) {\n        const $listeners = this.listeners[event];\n        if (!$listeners) return;\n        for (const listener of $listeners) {\n            listener && listener(event, ...value);\n        }\n    }\n\n    /**\n     * Register ActionHandler from Squad\n     *\n     * @param {string} context\n     * @param {Function} handler - ActionHandler\n     */\n    onDispatch(context, handler) {\n        hasRegisteredHandler(context, this.handlers[context]);\n        this.handlers[context] = handler;\n    }\n\n    /**\n     * Dipatch payload from view and emit ActionHandler\n     *\n     * @param {string|Object|Object[]} payloads\n     * @param {any} [value]\n     *\n     * @example\n     * dispatch('context.action', value)\n     * dispatch({ 'context.action': value, 'context.action': value })\n     * dispatch([{ context.action: value }, { 'context.action': value }])\n     */\n    dispatch(payloads, value) {\n        const $payloads = formatPayloads(payloads, value);\n\n        for (const payload of $payloads) {\n            const event = Object.keys(payload)[0];\n            const { context, action } = splitEventName(event);\n            const val = payload[event];\n            const handler = this.handlers[context];\n\n            validateHandlerExistence(event, handler);\n            handler && handler(action, val);\n        }\n    }\n\n    /**\n     * Register SharedAction\n     *\n     * @param {string} context\n     * @param {Function} handler\n     */\n    register(context, handler) {\n        hasRegisteredHandler(context, this.shareds[context]);\n        this.shareds[context] = handler;\n    }\n\n    /**\n     * Trigger SharedAction\n     *\n     * @param {string} event\n     * @param {any} value\n     */\n    trigger(event, ...value) {\n        const { context, action } = splitEventName(event);\n        const handler = this.shareds[context];\n\n        validateHandlerExistence(event, handler);\n        return handler && handler(action, ...value);\n    }\n\n\n    // for test\n    _clear() {\n        this.handlers = {};\n        this.listeners = {};\n        this.shareds = {};\n    }\n}\n"]}